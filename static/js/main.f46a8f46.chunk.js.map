{"version":3,"sources":["components/CartShopping.jsx","services/api.js","pages/ItemCardDetails.jsx","components/Message.jsx","components/CartButton.jsx","components/ItemCard.jsx","pages/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["CartShopping","getLocal","getSavedItem","JSON","parse","localStorage","getItem","setState","getLocalProduct","increase","index","state","quantity","decrease","this","length","map","product","key","data-testid","type","onClick","title","to","Component","getCategories","a","fetch","response","json","data","getProductsFromCategory","categoryId","getProductsCategory","getQuery","query","querySearch","getProductId","productId","ItemCardDetails","getProductDetails","id","props","match","params","api","productDetails","addToCart","array","push","cartJson","stringify","setItem","thumbnail","price","src","alt","Message","React","CartButton","ItemCard","addLocalStorage","card","Home","handleChange","value","target","search","handleClick","idProduct","products","results","fetchList","list","result","categories","category","onChange","name","produto","App","basename","process","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f46a8f46.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass CartShopping extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      getLocalProduct: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getLocal();\n  }\n\n  getLocal = () => {\n    const getSavedItem = JSON.parse(localStorage.getItem('cart'));\n    this.setState({\n      getLocalProduct: getSavedItem,\n    });\n  }\n\n  increase = (index) => {\n    const { getLocalProduct } = this.state;\n    getLocalProduct[index].quantity += 1;\n    this.setState({\n      getLocalProduct,\n    });\n  }\n\n  decrease = (index) => {\n    const { getLocalProduct } = this.state;\n    if (getLocalProduct[index].quantity >= 1) {\n      getLocalProduct[index].quantity -= 1;\n    }\n    this.setState({\n      getLocalProduct,\n    });\n  }\n\n  render() {\n    const { getLocalProduct } = this.state;\n    return (\n      <div>\n        {(!getLocalProduct || getLocalProduct.length === 0) ? (\n          <p data-testid=\"shopping-cart-empty-message\">\n            Seu carrinho est√° vazio\n          </p>\n        ) : (\n          <div>\n            {getLocalProduct.map((product, index) => (\n              <div\n                key={ index }\n              >\n                <span\n                  data-testid=\"shopping-cart-product-quantity\"\n                >\n                  {product.quantity}\n                </span>\n                <button\n                  type=\"button\"\n                  data-testid=\"product-increase-quantity\"\n                  onClick={ () => this.increase(index) }\n                >\n                  +\n                </button>\n                <button\n                  type=\"button\"\n                  data-testid=\"product-decrease-quantity\"\n                  onClick={ () => this.decrease(index) }\n                >\n                  -\n                </button>\n                <span data-testid=\"shopping-cart-product-name\">\n                  {product.title}\n                </span>\n              </div>\n            ))}\n          </div>\n        )}\n        <Link to=\"/\">Back to Home</Link>\n\n      </div>\n    );\n  }\n}\n\nexport default CartShopping;\n","export async function getCategories() {\n  const response = await fetch('https://api.mercadolibre.com/sites/MLB/categories');\n  const data = await response.json();\n  return data;\n}\n\nexport async function getProductsFromCategoryAndQuery(categoryId, query) {\n  const categorias = await fetch(`https://api.mercadolibre.com/sites/MLB/search?${query ? `&q=${query}` : `category=${categoryId}`}`);\n  const data = await categorias.json();\n  return data;\n}\n\nexport async function getProductsFromCategory(categoryId) {\n  const getProductsCategory = await fetch(`https://api.mercadolibre.com/sites/MLB/search?category=${categoryId}`);\n  const data = await getProductsCategory.json();\n  return data;\n}\n\nexport async function getQuery(query) {\n  const querySearch = await fetch(`https://api.mercadolibre.com/sites/MLB/search?q=${query}`);\n  const data = await querySearch.json();\n  return data;\n}\n\n// Requisito 06\nexport async function getProductId(product) {\n  const productId = await fetch(` https://api.mercadolibre.com/items/${product}`);\n  const data = await productId.json();\n  return data;\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport * as api from '../services/api';\n\nclass ItemCardDetails extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      productDetails: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getProductDetails();\n  }\n\n  getProductDetails = async () => {\n    const { match: { params: { id } } } = this.props;\n    const productDetails = await api.getProductId(id);\n\n    this.setState({\n      productDetails,\n    });\n  }\n  // atualiza localStorage\n\n  addToCart = (product) => {\n    product.quantity = 1;\n    let array = [];\n    const getItem = JSON.parse(localStorage.getItem('cart'));\n    if (getItem) {\n      array = getItem;\n      array.push(product);\n    } else {\n      array.push(product);\n    }\n    const cartJson = JSON.stringify(array);\n    localStorage.setItem('cart', cartJson);\n  }\n\n  render() {\n    const { productDetails: { title, thumbnail, price } } = this.state;\n    const { productDetails } = this.state;\n    return (\n      <div>\n        <div>\n          <h2 data-testid=\"product-detail-name\">{ title }</h2>\n          <img src={ thumbnail } alt={ title } />\n          <p>{ price }</p>\n        </div>\n        <div>\n          <Link\n            to=\"/\"\n            data-testid=\"product-detail-add-to-cart\"\n            type=\"button\"\n            onClick={ () => this.addToCart(productDetails) }\n          >\n            Add To Cart\n          </Link>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nItemCardDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n};\n\n// ItemCardDetails.defaultProps = {\n//   match: PropTypes.shape({ params: PropTypes.shape({}) }),\n// };\n\n// id: PropTypes.string.isRequired,\n//  match: PropTypes.string.isRequired,\n\nexport default ItemCardDetails;\n","import React from 'react';\n\nclass Message extends React.Component {\n  render() {\n    return (\n      <p\n        data-testid=\"home-initial-message\"\n      >\n        Digite algum termo de pesquisa ou escolha uma categoria.\n      </p>\n    );\n  }\n}\n\nexport default Message;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass CartButton extends Component {\n  render() {\n    return (\n      <Link to=\"/mycart\" data-testid=\"shopping-cart-button\">\n        <span>üõí</span>\n      </Link>\n    );\n  }\n}\n\nexport default CartButton;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ItemCard extends Component {\n  // addLocalStorage = (product) => {\n  //   const getItem = JSON.parse(localStorage.getItem('cart'));\n  //   if (!getItem) {\n  //     const cartJson = JSON.stringify([product]); // transforma\n  //     localStorage.setItem('cart', cartJson); // salva no lacal\n  //   } else {\n  //     getItem.push(product); // adiciona ao anterior\n  //     const cartJson = JSON.stringify(getItem);\n  //     localStorage.setItem('cart', cartJson);\n  //   }\n  // }\n\n  // ajuda de Dilenio\n\n  addLocalStorage = (product) => {\n    product.quantity = 1;\n    let array = [];\n    const getItem = JSON.parse(localStorage.getItem('cart'));\n    if (getItem) {\n      array = getItem;\n      array.push(product);\n    } else {\n      array.push(product);\n    }\n    const cartJson = JSON.stringify(array);\n    localStorage.setItem('cart', cartJson);\n  }\n\n  render() {\n    const { card } = this.props;\n    const { card: { title, thumbnail, price } } = this.props;\n    return (\n      <div data-testid=\"product\">\n        <h2>{ title }</h2>\n        <img src={ thumbnail } alt=\"title \" />\n        <p>{ price }</p>\n        <button\n          type=\"button\"\n          data-testid=\"product-add-to-cart\"\n          onClick={ () => this.addLocalStorage(card) }\n        >\n          Add To Cart\n        </button>\n      </div>\n    );\n  }\n}\n\nItemCard.propTypes = {\n  card: PropTypes.shape({\n    title: PropTypes.string,\n    thumbnail: PropTypes.string,\n    price: PropTypes.number,\n  }).isRequired,\n};\n\nexport default ItemCard;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport * as api from '../services/api';\nimport Message from '../components/Message';\nimport CartButton from '../components/CartButton';\nimport ItemCard from '../components/ItemCard';\n\nclass Home extends Component {\n  constructor() {\n    super();\n\n    this.state = { // tirei o categoryId\n      products: [],\n      // message: true,\n      search: '', // acrescentei aqui o search\n      categories: [],\n    };\n  }\n\n  async componentDidMount() {\n    const category = await api.getCategories();\n    this.setState({\n      categories: category,\n    });\n  }\n\n  handleChange = ({ target: { value } }) => { // mudan√ßa aqui trouxe do inputSearch\n    this.setState({\n      search: value,\n    });\n  }\n\n  handleClick = async ({ target }) => {\n    const { id } = target;\n    const idProduct = await api.getProductsFromCategory(id); // categorias clicadas\n    this.setState({\n      products: idProduct.results, // 50 produtos (id da categoria)\n      // message: false,\n    });\n  }\n\n    fetchList = async () => {\n      const { search } = this.state;\n      const list = await api.getQuery(search); // tirei o categoryId\n      const result = list.results;\n      this.setState({\n        products: result,\n        // message: false,\n      });\n    }\n\n    render() {\n      const { products, search, categories } = this.state;\n      if (!products) return <p>Nenhum produto foi encontrado</p>;\n      return (\n        <main>\n          <header>\n            <CartButton />\n            <input\n              type=\"text\"\n              data-testid=\"query-input\"\n              value={ search }\n              onChange={ this.handleChange }\n            />\n            <button\n              data-testid=\"query-button\"\n              type=\"button\"\n              onClick={ this.fetchList } // tirou o fetch daqui ... bugando\n            >\n              Search\n            </button>\n          </header>\n          <section>\n            <Message />\n          </section>\n          <div>\n            { categories.map((category) => ( // fazendo mudan√ßas aqui ... acrescentei bot√£o\n              <div\n                key={ category.id }\n              >\n                <button\n                  data-testid=\"category\"\n                  type=\"button\"\n                  id={ category.id }\n                  onClick={ this.handleClick }\n                >\n                  {category.name}\n                </button>\n              </div>))}\n            <section>\n              {\n                // Requisito 06\n                // message\n                //   ? <Message />\n                products.map((produto) => (\n                  <div key={ produto.id }>\n                    <Link\n                      key={ produto.id }\n                      produto={ produto.id }\n                      data-testid=\"product-detail-link\"\n                      to={ `/item/${produto.id}` }\n                    >\n                      Details\n                    </Link>\n                    <ItemCard card={ produto } />\n                  </div>\n                ))\n              }\n            </section>\n          </div>\n        </main>\n      );\n    }\n}\n\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport CartShopping from './components/CartShopping';\nimport ItemCardDetails from './pages/ItemCardDetails';\nimport Home from './pages/Home';\n\nfunction App() {\n  return (\n    <main>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path=\"/\" component={ Home } />\n          <Route exact path=\"/mycart\" component={ CartShopping } />\n          <Route\n            exact\n            path=\"/item/:id\"\n            component={ ItemCardDetails }\n          />\n        </Switch>\n      </BrowserRouter>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  const NOT_FOUND = 404;\n  const NOT_FOUND_IN_ARRAY = -1;\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  }).then((response) => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n    if (response.status === NOT_FOUND\n        || (contentType != null\n          && contentType.indexOf('javascript') === NOT_FOUND_IN_ARRAY)) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then((registration) => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}